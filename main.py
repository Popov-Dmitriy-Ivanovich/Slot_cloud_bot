from config import TOKEN
from config import ADMIN_ID
from catalog import *
import telebot
from telebot import types
import offer
from functions import cancel_button
import admin
OFFER_DATA = dict()
bot = telebot.TeleBot(TOKEN)
bot.send_message(ADMIN_ID, "Slot_cloud bot is working")
@bot.message_handler(func= lambda m: m.text == '/id')
def send_id (message):
    bot.send_message(message.from_user.id, message.from_user.id)

@bot.message_handler(func= lambda m: m.text == '/user_name')
def send_id (message):
    bot.send_message(message.from_user.id, message.from_user.username)

@bot.message_handler(func = lambda m: m.text == '/delete')
def clear (message):
        bot.delete_message(message.chat.id, message.message_id-1)

@bot.message_handler(func = lambda m: m.text == '/admin')
def admin_boot (mes):
    if(mes.from_user.id == ADMIN_ID):
        ask = bot.send_message(mes.from_user.id,'–Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞? (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏–ª—Å–æ —É–º–µ–Ω—å—à–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞)')
        bot.register_next_step_handler(ask, change_handler)
   

def change_handler (mes):
    callback_button_change_hookah = types.InlineKeyboardButton('–ö–∞–ª—å—è–Ω—ã', callback_data = 'choice:hookah:' + mes.text)    
    callback_button_change_bowl = types.InlineKeyboardButton('–ß–∞—à–∏',callback_data = 'choice:bowl:' + mes.text)
    callback_button_change_flask = types.InlineKeyboardButton('–ö–∞–ª–±—ã',callback_data = 'choice:flask:' + mes.text)
    callback_button_change_extra = types.InlineKeyboardButton('–î–æ–ø —É—Å–ª—É–≥–∏',callback_data = 'choice:extra:' + mes.text)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(callback_button_change_bowl)
    keyboard.add(callback_button_change_hookah)
    keyboard.add(callback_button_change_flask)
    keyboard.add(callback_button_change_extra)
    bot.send_message(mes.from_user.id, '–≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=keyboard)

@bot.callback_query_handler(func = lambda call: call.data[:6]=='choice')
def choice_process (call):
    admin.show_admin_panel(bot,call, call.data.split(':')[1],call.data.split(':')[2])

@bot.callback_query_handler(func = lambda call: call.data[:6] == 'change')
def process_change (call):
    admin.increase_count(call.data.split(';')[1], int(call.data.split(';')[2]), int (call.data.split(';')[3]))
    bot.send_message(call.from_user.id, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!')
@bot.message_handler(func = lambda m: m.text == '/start')
def start_message (message):    
    keyboard = types.InlineKeyboardMarkup()
    callback_button_catalog = types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    callback_button_offer = types.InlineKeyboardButton(text="—Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="offer")
    callback_button_info = types.InlineKeyboardButton( text = '–û –Ω–∞—Å', callback_data = 'info')
    callback_button_rules = types.InlineKeyboardButton(text= '–ø—Ä–∞–≤–∏–ª–∞', callback_data = 'rules')
    keyboard.add(callback_button_catalog,callback_button_offer)
    keyboard.add(callback_button_info,callback_button_rules)
    bot.send_message(message.from_user.id, '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç Slot_cloud, —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup= keyboard)
    bot.delete_message(message.from_user.id, message.id)

@bot.callback_query_handler(func=lambda call: call.data == "start") #show catalog
def test_callback(call): # <- passes a CallbackQuery type object to your function
    keyboard = types.InlineKeyboardMarkup()
    callback_button_catalog = types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
    callback_button_offer = types.InlineKeyboardButton(text="—Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="offer")
    keyboard.add(callback_button_catalog,callback_button_offer)
    callback_button_info = types.InlineKeyboardButton( text = '–û –Ω–∞—Å', callback_data = 'info')
    callback_button_rules = types.InlineKeyboardButton(text= '–ø—Ä–∞–≤–∏–ª–∞', callback_data = 'rules')
    keyboard.add(callback_button_info,callback_button_rules)
    bot.send_message(call.from_user.id, '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç Slot_cloud, —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:', reply_markup= keyboard)
    bot.delete_message(call.message.chat.id,call.message.id)
@bot.callback_query_handler(func = lambda call:call.data == 'info')
def show_info (call):
    callback_button_menu = types.InlineKeyboardButton('–º–µ–Ω—é', callback_data = 'start')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(callback_button_menu)
    bot.delete_message(call.message.chat.id, call.message.id)
    bot.send_message(call.from_user.id,'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 19.11.2021 \n\n–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: 10 –º–∏–Ω—É—Ç (–∑–∞ —á–∞—Å—Ç—É—é –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–∏ –º–∏–Ω—É—Ç—ã!)\n\n–°–∞–º–æ–≤—ã–≤–æ–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 8:00 –¥–æ 23:00\n–î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 18:00 –¥–æ 23:00\n\n–î–æ—Å—Ç–∞–≤–∫–∞ –∫–∞–ª—å—è–Ω–∞ –Ω–∞ –¥–æ–º:\n–õ–µ–Ω–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω: –¥–æ 40 –º–∏–Ω—É—Ç\n–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π —Ä–∞–π–æ–Ω: –¥–æ 30 –º–∏–Ω—É—Ç\n–°–æ–≤–µ—Ç—Å–∫–∏–π —Ä–∞–π–æ–Ω: –¥–æ 50 –º–∏–Ω—É—Ç\n–°—Ç—Ä–æ–∏—Ç–µ–ª—å: –¥–æ 1 —á–∞—Å–∞ 20 –º–∏–Ω—É—Ç\n\n–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\ninst: @slot_sergey\nwats app: +79806773421\ntg: @slotsalat\n–ú–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∑–≤–æ–Ω–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ wats app): +79806773421',reply_markup=keyboard)

@bot.callback_query_handler(func = lambda call: call.data == 'rules')
def show_rules(call):
    callback_button_menu = types.InlineKeyboardButton('–º–µ–Ω—é', callback_data = 'start')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(callback_button_menu) 
    bot.delete_message(call.message.chat.id, call.message.id)
    bot.send_document(call.from_user.id, open('Dogovor_Arendy.docx','rb'),caption='–ù–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã:\n1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞üòÉ\n2. –í—Å–µ–≥–¥–∞ –±—ã—Ç—å –Ω–∞ —Å–≤—è–∑–∏üì≤\n3. –°–æ–±–ª—é–¥–∞—Ç—å —É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ (–æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –Ω–∏–∂–µ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è)üìÉ\n4. –ü–æ–ª—É—á–∞—Ç—å –º–∞—Å—Å—É —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏üòä', reply_markup = keyboard)   
@bot.callback_query_handler(func=lambda call: call.data == "catalog") #show catalog
def test_callback(call): # <- passes a CallbackQuery type object to your function
    show_catalog(bot, call)

@bot.callback_query_handler( func = lambda call: call.data == 'show_hookah')
def answer_callback (call):
    show_item_list(bot, call.from_user.id, '–°–ø–∏—Å–æ–∫ –∫–∞–ª—å—è–Ω–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏:', create_items_list (create_items_table(),'hookah'))
    bot.delete_message(call.message.chat.id, call.message.id)

@bot.callback_query_handler( func = lambda call: call.data == 'show_bowl')
def answer_callback (call):
    show_item_list(bot, call.from_user.id, '–°–ø–∏—Å–æ–∫ —á–∞—à –≤ –Ω–∞–ª–∏—á–∏–∏:', create_items_list (create_items_table(),'bowl'))
    bot.delete_message(call.message.chat.id, call.message.id)

@bot.callback_query_handler( func = lambda call: call.data == 'show_flask')
def answer_callback (call):
    show_item_list(bot, call.from_user.id, '–°–ø–∏—Å–æ–∫ –∫–æ–ª–± –≤ –Ω–∞–ª–∏—á–∏–∏:', create_items_list (create_items_table(),'flask'))
    bot.delete_message(call.message.chat.id, call.message.id)

@bot.callback_query_handler( func = lambda call: call.data == 'show_tobacco')
def answer_callback (call):
    show_item_list(bot, call.from_user.id, '–°–ø–∏—Å–æ–∫ —Ç–∞–±–∞–∫–∞ –≤ –Ω–∞–ª–∏—á–∏–∏:', create_items_list (create_items_table(),'tobacco'))
    bot.delete_message(call.message.chat.id, call.message.id)

@bot.callback_query_handler( func = lambda call: call.data == 'show_extra')
def answer_callback (call):
    show_item_list(bot, call.from_user.id, '–°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥:', create_items_list (create_items_table(),'extra'))
    bot.delete_message(call.message.chat.id, call.message.id)

@bot.callback_query_handler(func = lambda call: call.data[0:4] == 'info')
def answer_callback (call):
    text_file = open (call.data[4:].split(';')[0])
    path = call.data[4:].split(';')[1]
    photo = open(path, 'rb')
    callback_button_hideinfo = types.InlineKeyboardButton('<-–Ω–∞–∑–∞–¥', callback_data='hide_info')
    keyboardmarkup = types.InlineKeyboardMarkup()
    keyboardmarkup.add(callback_button_hideinfo)
    bot.send_photo(call.from_user.id, photo, caption=text_file.read(),reply_markup=keyboardmarkup)
    #bot.send_message(call.from_user.id,path)
@bot.callback_query_handler(func = lambda call: call.data == 'hide_info')
def answer_callback (call):
    bot.delete_message(call.message.chat.id,call.message.id)

@bot.callback_query_handler(func=lambda call: call.data == "offer") #show offer
def offer_making(call): 
    bot.delete_message(call.message.chat.id, call.message.id)
    ask = bot.send_message(call.from_user.id, '–ß—Ç–æ–±—ã –ø—Ä–∏—Å—É–ø–∏—Ç—å –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞') 
    bot.register_next_step_handler(ask, get_number)
def get_number(mes):
    callback_button_next = types.InlineKeyboardButton('–¥–∞–ª–µ–µ',callback_data = 'offer_step1')
    callback_button_cancel = types.InlineKeyboardButton('–æ—Ç–º–µ–Ω–∞',callback_data = 'start')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(callback_button_next)
    keyboard.add(callback_button_cancel)
    OFFER_DATA [mes.from_user.id] = mes.text
    bot.delete_message(mes.chat.id,mes.id)
    bot.delete_message(mes.chat.id,mes.id-1)
    bot.send_message(mes.from_user.id,'–í–∞—à –Ω–æ–º–µ—Ä: '+OFFER_DATA[mes.from_user.id],reply_markup=keyboard)
    
@bot.callback_query_handler(func = lambda call: call.data == 'offer_step1')
def offer_step1_function (call):
    bot.delete_message(call.message.chat.id,call.message.id)
    offer.show_offer_options_hookah(bot, call)

@bot.callback_query_handler(func = lambda call: call.data[:11]=='offer_step2')
def offer_step2_handl (call):
    OFFER_DATA[call.from_user.id] +='\n' + str(create_items_list(create_items_table(), 'hookah')[int(call.data[12:])].split(';')[0])
    bot.delete_message(call.message.chat.id,call.message.id)
    offer.show_offer_options_flask(bot, call)

@bot.callback_query_handler(func = lambda call: call.data[:11]=='offer_step3')
def offer_step3_handl (call):
    OFFER_DATA[call.from_user.id] +='\n' + str(create_items_list(create_items_table(), 'flask')[int(call.data[12:])].split(';')[0])
    bot.delete_message(call.message.chat.id,call.message.id)
    offer.show_offer_options_bowl(bot, call)
@bot.callback_query_handler (func = lambda call: call.data[:11]=='offer_step4')
def offer_step4_handl (call):
    OFFER_DATA[call.from_user.id] +='\n' + str(create_items_list(create_items_table(), 'bowl')[int(call.data[12:])].split(';')[0])
    callback_button_withTobacco = types.InlineKeyboardButton('–¥–∞', callback_data = 'offer_step5;y')
    callback_button_withNOTobacco = types.InlineKeyboardButton('–Ω–µ—Ç', callback_data = 'offer_step5;n')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(callback_button_withNOTobacco,callback_button_withTobacco)
    keyboard.add(cancel_button)
    bot.delete_message(call.message.chat.id, call.message.id)
    bot.send_message(call.from_user.id, '–í—ã –±—É–¥–µ—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–∞–ª—å—è–Ω —Å —Ç–∞–±–∞–∫–æ–º?', reply_markup = keyboard)

@bot.callback_query_handler(func = lambda call: call.data[:11] == 'offer_step5')
def offer_step5_handl (call):
    print('worked')
    if call.data[-1] == 'n':
        OFFER_DATA[call.from_user.id]+='\n'+'–ë–µ–∑ —Ç–∞–±–∞–∫–∞'
    else:
        OFFER_DATA[call.from_user.id]+='\n'+'–° —Ç–∞–±–∞–∫–æ–º'
    callback_button_withShipping = types.InlineKeyboardButton('–î–æ—Å—Ç–∞–≤–∫–∞', callback_data = 'offer_step6;1')
    callback_button_withNOShipping = types.InlineKeyboardButton('–°–∞–º–æ–≤—ã–≤–æ–∑', callback_data = 'offer_step6;0')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(callback_button_withNOShipping)
    keyboard.add(callback_button_withShipping)
    keyboard.add(cancel_button)
    bot.delete_message(call.message.chat.id, call.message.id)
    bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–∞–ª—å—è–Ω–∞', reply_markup = keyboard)       

@bot.callback_query_handler(func = lambda call: call.data[:11] == 'offer_step6')
def offer_step5_handl (call):
    #print('worked')
    if call.data[-1] == '1':
        OFFER_DATA[call.from_user.id]+='\n'+'–î–æ—Å—Ç–∞–≤–∫–∞'
    else:
        OFFER_DATA[call.from_user.id]+='\n'+'–°–∞–º–æ–≤—ã–≤–æ–∑'
    callback_button_card = types.InlineKeyboardButton('–ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É (–°–±–µ—Ä, –¢–∏–Ω—å–∫–æ—Ñ—Ñ)', callback_data = 'offer_step7;T')
    callback_button_money = types.InlineKeyboardButton('–ù–∞–ª–∏—á–Ω—ã–º–∏', callback_data = 'offer_step7;M')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(callback_button_card)
    keyboard.add(callback_button_money)
    keyboard.add(cancel_button)
    bot.delete_message(call.message.chat.id, call.message.id)
    bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup = keyboard)

@bot.callback_query_handler(func = lambda call: call.data[:11]=='offer_step7')
def offer_step7_handl (call):
    if call.data[-1] == 'T':
        OFFER_DATA[call.from_user.id]+='\n'+'–æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π (–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å–±–µ—Ä/—Ç–∏–Ω—å–∫–æ—Ñ—Ñ'
    else:
        OFFER_DATA[call.from_user.id]+='\n'+'–æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏'
    callback_button_confirm = types.InlineKeyboardButton('–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data = 'confirm')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(callback_button_confirm)
    keyboard.add(cancel_button)
    bot.delete_message(call.message.chat.id,call.message.id)
    bot.send_message(call.from_user.id, '–ü–æ–¥—Ç–≤–µ—Ä–∏–¥—Ç–µ –∑–∞–∫–∞–∑', reply_markup=keyboard)

@bot.callback_query_handler(func = lambda call: call.data[:11]=='confirm')
def offer_step7_handl (call):
    callback_button_confirm = types.InlineKeyboardButton('–≥–æ—Ç–æ–≤–æ', callback_data = 'start')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(callback_button_confirm)
    bot.delete_message(call.message.chat.id,call.message.id)
    bot.send_message(ADMIN_ID, OFFER_DATA[call.from_user.id])
    OFFER_DATA.pop(call.from_user.id)
    bot.send_message(call.from_user.id, '–≤–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫', reply_markup=keyboard)

@bot.callback_query_handler(func = lambda call: call.data == 'cancel')
def cancel_handl(call):
    bot.delete_message(call.message.chat.id,call.message.id)
    OFFER_DATA.pop(call.from_user.id)
    callback_button_menu = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data = 'start')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(callback_button_menu)
    bot.send_message(call.from_user.id, '–≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω',reply_markup=keyboard)
bot.polling();